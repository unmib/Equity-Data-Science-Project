import { createGlobalStyle } from "styled-components";
export default createGlobalStyle`
  @import url('<https://fonts.googleapis.com/css?family=Roboto:400,700&display=swap>');
  
  * {
    margin: 0;
    padding: 0;
    outline: 0; 
    border: 0;
    box-sizing: border-box;
  }
  *:focus {
    outline: 0;
  }
  html, body, #root {
    height: 100%;
  }
  body {
    -webkit-font-smoothing: antialiased;
  }
  body, input, button {
    font: 14px 'Roboto', sans-serif;
  }
  a {
    text-decoration: none;
  }
  ul {
    list-style: none;
  }
  button {
    cursor: pointer;
  }
`;
import React from "react";
import { Router } from "react-router-dom";
import history from "./services/history";
import Routes from "./routes";
import GlobalStyles from "./styles/global";
function App() {
  return (
    <Router history={history}>
      <Routes />
      <GlobalStyles />
    </Router>
  );
}
export default App;
import styled from "styled-components";
export const Wrapper = styled.div`
  background: linear-gradient(to bottom, #ffc5c5, #ff4949);
  height: 100%;
`;
import React from 'react'; 
import PropTypes from 'prop-types';  
import { Wrapper } from './styles';  
export default function DefaultLayout({ children }) {   
  return <Wrapper>{children}</Wrapper>; 
}  
DefaultLayout.propTypes = {   
  children: PropTypes.element.isRequired, 
};
<Element>
  <SubElement1 />
  <SubElement2 />
</Element>
import styled from "styled-components";
export const Wrapper = styled.div`
  background: linear-gradient(to bottom, #e7ffb3, #707070);
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
`;
export const Header = styled.div`
  background: #333;
  height: 10vh;
`;
import React from "react";
import PropTypes from "prop-types";
import { Wrapper, Header } from "./styles";
export default function AuthLayout({ children }) {
  console.log(children);
  return (
    <>
      <Header />
      <Wrapper>{children}</Wrapper>
    </>
  );
}
AuthLayout.propTypes = {
  children: PropTypes.element.isRequired
};
return <Route {...rest} component={Component} />;

import React from "react";
import PropTypes from "prop-types";
import { Route, Redirect } from "react-router-dom";
import DefaultLayout from "../pages/_layouts/default";
import AuthLayout from "../pages/_layouts/auth";
export default function RouteWrapper({
  component: Component,
  isPrivate,
  ...rest
}) {
  const signed = true;
  /**
   * Redirect user to SignIn page if he tries to access a private route
   * without authentication.
   */
  if (isPrivate && !signed) {
    return <Redirect to="/" />;
  }
  /**
   * Redirect user to Main page if he tries to access a non private route
   * (SignIn or SignUp) after being authenticated.
   */
  if (!isPrivate && signed) {
    return <Redirect to="/dashboard" />;
  }
  const Layout = signed ? AuthLayout : DefaultLayout;
  /**
   * If not included on both previous cases, redirect user to the desired route.
   */
  return (
    <Route
      {...rest}
      render={props => (
        <Layout>
          <Component {...props} />
        </Layout>
      )}
    />
  );
}
RouteWrapper.propTypes = {
  isPrivate: PropTypes.bool,
  component: PropTypes.oneOfType([PropTypes.element, PropTypes.func]).isRequired
};
RouteWrapper.defaultProps = {
  isPrivate: false
};